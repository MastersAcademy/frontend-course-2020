/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,t){r.__proto__=t}||function(r,t){for(var e in t)t.hasOwnProperty(e)&&(r[e]=t[e])})(t,e)};function t(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function e(r){return"function"==typeof r}var n=!1,o={Promise:void 0,set useDeprecatedSynchronousErrorHandling(r){r&&(new Error).stack,n=r},get useDeprecatedSynchronousErrorHandling(){return n}};function i(r){setTimeout((function(){throw r}),0)}var s={closed:!0,next:function(r){},error:function(r){if(o.useDeprecatedSynchronousErrorHandling)throw r;i(r)},complete:function(){}},u=function(){return Array.isArray||function(r){return r&&"number"==typeof r.length}}(),c=function(){function r(r){return Error.call(this),this.message=r?r.length+" errors occurred during unsubscription:\n"+r.map((function(r,t){return t+1+") "+r.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=r,this}return r.prototype=Object.create(Error.prototype),r}(),a=function(){function r(r){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,r&&(this._ctorUnsubscribe=!0,this._unsubscribe=r)}return r.prototype.unsubscribe=function(){var t;if(!this.closed){var n,o=this,i=o._parentOrParents,s=o._ctorUnsubscribe,a=o._unsubscribe,l=o._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,i instanceof r)i.remove(this);else if(null!==i)for(var p=0;p<i.length;++p)i[p].remove(this);if(e(a)){s&&(this._unsubscribe=void 0);try{a.call(this)}catch(r){t=r instanceof c?h(r.errors):[r]}}if(u(l)){p=-1;for(var f=l.length;++p<f;){var d=l[p];if(null!==(n=d)&&"object"==typeof n)try{d.unsubscribe()}catch(r){t=t||[],r instanceof c?t=t.concat(h(r.errors)):t.push(r)}}}if(t)throw new c(t)}},r.prototype.add=function(t){var e=t;if(!t)return r.EMPTY;switch(typeof t){case"function":e=new r(t);case"object":if(e===this||e.closed||"function"!=typeof e.unsubscribe)return e;if(this.closed)return e.unsubscribe(),e;if(!(e instanceof r)){var n=e;(e=new r)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}var o=e._parentOrParents;if(null===o)e._parentOrParents=this;else if(o instanceof r){if(o===this)return e;e._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return e;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[e]:i.push(e),e},r.prototype.remove=function(r){var t=this._subscriptions;if(t){var e=t.indexOf(r);-1!==e&&t.splice(e,1)}},r.EMPTY=function(r){return r.closed=!0,r}(new r),r}();function h(r){return r.reduce((function(r,t){return r.concat(t instanceof c?t.errors:t)}),[])}var l=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),p=function(r){function e(t,n,o){var i=r.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=s;break;case 1:if(!t){i.destination=s;break}if("object"==typeof t){t instanceof e?(i.syncErrorThrowable=t.syncErrorThrowable,i.destination=t,t.add(i)):(i.syncErrorThrowable=!0,i.destination=new f(i,t));break}default:i.syncErrorThrowable=!0,i.destination=new f(i,t,n,o)}return i}return t(e,r),e.prototype[l]=function(){return this},e.create=function(r,t,n){var o=new e(r,t,n);return o.syncErrorThrowable=!1,o},e.prototype.next=function(r){this.isStopped||this._next(r)},e.prototype.error=function(r){this.isStopped||(this.isStopped=!0,this._error(r))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,r.prototype.unsubscribe.call(this))},e.prototype._next=function(r){this.destination.next(r)},e.prototype._error=function(r){this.destination.error(r),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var r=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=r,this},e}(a),f=function(r){function n(t,n,o,i){var u,c=r.call(this)||this;c._parentSubscriber=t;var a=c;return e(n)?u=n:n&&(u=n.next,o=n.error,i=n.complete,n!==s&&(e((a=Object.create(n)).unsubscribe)&&c.add(a.unsubscribe.bind(a)),a.unsubscribe=c.unsubscribe.bind(c))),c._context=a,c._next=u,c._error=o,c._complete=i,c}return t(n,r),n.prototype.next=function(r){if(!this.isStopped&&this._next){var t=this._parentSubscriber;o.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,r)&&this.unsubscribe():this.__tryOrUnsub(this._next,r)}},n.prototype.error=function(r){if(!this.isStopped){var t=this._parentSubscriber,e=o.useDeprecatedSynchronousErrorHandling;if(this._error)e&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,r),this.unsubscribe()):(this.__tryOrUnsub(this._error,r),this.unsubscribe());else if(t.syncErrorThrowable)e?(t.syncErrorValue=r,t.syncErrorThrown=!0):i(r),this.unsubscribe();else{if(this.unsubscribe(),e)throw r;i(r)}}},n.prototype.complete=function(){var r=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var e=function(){return r._complete.call(r._context)};o.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,e),this.unsubscribe()):(this.__tryOrUnsub(e),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(r,t){try{r.call(this._context,t)}catch(r){if(this.unsubscribe(),o.useDeprecatedSynchronousErrorHandling)throw r;i(r)}},n.prototype.__tryOrSetError=function(r,t,e){if(!o.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,e)}catch(t){return o.useDeprecatedSynchronousErrorHandling?(r.syncErrorValue=t,r.syncErrorThrown=!0,!0):(i(t),!0)}return!1},n.prototype._unsubscribe=function(){var r=this._parentSubscriber;this._context=null,this._parentSubscriber=null,r.unsubscribe()},n}(p),d=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function y(r){return r}function b(r){return 0===r.length?y:1===r.length?r[0]:function(t){return r.reduce((function(r,t){return t(r)}),t)}}var v=function(){function r(r){this._isScalar=!1,r&&(this._subscribe=r)}return r.prototype.lift=function(t){var e=new r;return e.source=this,e.operator=t,e},r.prototype.subscribe=function(r,t,e){var n=this.operator,i=function(r,t,e){if(r){if(r instanceof p)return r;if(r[l])return r[l]()}return r||t||e?new p(r,t,e):new p(s)}(r,t,e);if(n?i.add(n.call(i,this.source)):i.add(this.source||o.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),o.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},r.prototype._trySubscribe=function(r){try{return this._subscribe(r)}catch(t){o.useDeprecatedSynchronousErrorHandling&&(r.syncErrorThrown=!0,r.syncErrorValue=t),function(r){for(;r;){var t=r,e=t.closed,n=t.destination,o=t.isStopped;if(e||o)return!1;r=n&&n instanceof p?n:null}return!0}(r)?r.error(t):console.warn(t)}},r.prototype.forEach=function(r,t){var e=this;return new(t=w(t))((function(t,n){var o;o=e.subscribe((function(t){try{r(t)}catch(r){n(r),o&&o.unsubscribe()}}),n,t)}))},r.prototype._subscribe=function(r){var t=this.source;return t&&t.subscribe(r)},r.prototype[d]=function(){return this},r.prototype.pipe=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];return 0===r.length?this:b(r)(this)},r.prototype.toPromise=function(r){var t=this;return new(r=w(r))((function(r,e){var n;t.subscribe((function(r){return n=r}),(function(r){return e(r)}),(function(){return r(n)}))}))},r.create=function(t){return new r(t)},r}();function w(r){if(r||(r=o.Promise||Promise),!r)throw new Error("no Promise impl found");return r}function _(r,t){return function(e){if("function"!=typeof r)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return e.lift(new g(r,t))}}var g=function(){function r(r,t){this.project=r,this.thisArg=t}return r.prototype.call=function(r,t){return t.subscribe(new E(r,this.project,this.thisArg))},r}(),E=function(r){function e(t,e,n){var o=r.call(this,t)||this;return o.project=e,o.count=0,o.thisArg=n||o,o}return t(e,r),e.prototype._next=function(r){var t;try{t=this.project.call(this.thisArg,r,this.count++)}catch(r){return void this.destination.error(r)}this.destination.next(t)},e}(p);function m(r,t,n,o){return e(n)&&(o=n,n=void 0),o?m(r,t,n).pipe(_((function(r){return u(r)?o.apply(void 0,r):o(r)}))):new v((function(e){S(r,t,(function(r){arguments.length>1?e.next(Array.prototype.slice.call(arguments)):e.next(r)}),e,n)}))}function S(r,t,e,n,o){var i;if(function(r){return r&&"function"==typeof r.addEventListener&&"function"==typeof r.removeEventListener}(r)){var s=r;r.addEventListener(t,e,o),i=function(){return s.removeEventListener(t,e,o)}}else if(function(r){return r&&"function"==typeof r.on&&"function"==typeof r.off}(r)){var u=r;r.on(t,e),i=function(){return u.off(t,e)}}else if(function(r){return r&&"function"==typeof r.addListener&&"function"==typeof r.removeListener}(r)){var c=r;r.addListener(t,e),i=function(){return c.removeListener(t,e)}}else{if(!r||!r.length)throw new TypeError("Invalid event target");for(var a=0,h=r.length;a<h;a++)S(r[a],t,e,n,o)}n.add(i)}var P=function(r){function e(t,e){var n=r.call(this,t,e)||this;return n.scheduler=t,n.work=e,n.pending=!1,n}return t(e,r),e.prototype.schedule=function(r,t){if(void 0===t&&(t=0),this.closed)return this;this.state=r;var e=this.id,n=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(n,e,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(n,this.id,t),this},e.prototype.requestAsyncId=function(r,t,e){return void 0===e&&(e=0),setInterval(r.flush.bind(r,this),e)},e.prototype.recycleAsyncId=function(r,t,e){if(void 0===e&&(e=0),null!==e&&this.delay===e&&!1===this.pending)return t;clearInterval(t)},e.prototype.execute=function(r,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(r,t);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(r,t){var e=!1,n=void 0;try{this.work(r)}catch(r){e=!0,n=!!r&&r||new Error(r)}if(e)return this.unsubscribe(),n},e.prototype._unsubscribe=function(){var r=this.id,t=this.scheduler,e=t.actions,n=e.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==n&&e.splice(n,1),null!=r&&(this.id=this.recycleAsyncId(t,r,null)),this.delay=null},e}(function(r){function e(t,e){return r.call(this)||this}return t(e,r),e.prototype.schedule=function(r,t){return void 0===t&&(t=0),this},e}(a)),x=function(){function r(t,e){void 0===e&&(e=r.now),this.SchedulerAction=t,this.now=e}return r.prototype.schedule=function(r,t,e){return void 0===t&&(t=0),new this.SchedulerAction(this,r).schedule(e,t)},r.now=function(){return Date.now()},r}(),O=new(function(r){function e(t,n){void 0===n&&(n=x.now);var o=r.call(this,t,(function(){return e.delegate&&e.delegate!==o?e.delegate.now():n()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return t(e,r),e.prototype.schedule=function(t,n,o){return void 0===n&&(n=0),e.delegate&&e.delegate!==this?e.delegate.schedule(t,n,o):r.prototype.schedule.call(this,t,n,o)},e.prototype.flush=function(r){var t=this.actions;if(this.active)t.push(r);else{var e;this.active=!0;do{if(e=r.execute(r.state,r.delay))break}while(r=t.shift());if(this.active=!1,e){for(;r=t.shift();)r.unsubscribe();throw e}}},e}(x))(P);function k(r,t){var e;return void 0===r&&(r=0),void 0===t&&(t=O),(u(e=r)||!(e-parseFloat(e)+1>=0)||r<0)&&(r=0),t&&"function"==typeof t.schedule||(t=O),new v((function(e){return e.add(t.schedule(T,r,{subscriber:e,counter:0,period:r})),e}))}function T(r){var t=r.subscriber,e=r.counter,n=r.period;t.next(e),this.schedule({subscriber:t,counter:e+1,period:n},n)}var B=function(){function r(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return r.prototype=Object.create(Error.prototype),r}(),A=new v((function(r){return r.complete()}));var K=function(){function r(r){if(this.total=r,this.total<0)throw new B}return r.prototype.call=function(r,t){return t.subscribe(new D(r,this.total))},r}(),D=function(r){function e(t,e){var n=r.call(this,t)||this;return n.total=e,n.count=0,n}return t(e,r),e.prototype._next=function(r){var t=this.total,e=++this.count;e<=t&&(this.destination.next(r),e===t&&(this.destination.complete(),this.unsubscribe()))},e}(p);new(function(){function r(r){this.iskeyDownBlock=!1,this.interval=2e3,this.score=100,this.progressBarValue=0,this.currentKey="",this.el=r,this.setKey(this.getCurrentKey()),this.findElements(),this.subscribeOnKeyPress()}return r.prototype.start=function(){r.renderKeyEl(this.elements.keyEl,this.currentKey),this.startKeysInterval(),this.runProgressBar()},r.prototype.findElements=function(){this.elements={scoreEl:this.el.querySelector("[data-score]"),cubeScoreEl:this.el.querySelector("[data-cube-score]"),cubeEl:this.el.querySelector("[data-cube]"),keyEl:this.el.querySelector("[data-key]"),progressBarEl:this.el.querySelector("[data-progress]")}},r.prototype.subscribeOnKeyPress=function(){var t=this;m(window,"keydown").pipe(_((function(r){var e;return 0===r.location&&(e=r.key.toUpperCase()===t.currentKey.toUpperCase()),e}))).subscribe((function(e){if(!t.iskeyDownBlock&&"boolean"==typeof e){var n=t.calculateScore(t.progressBarValue,e);t.setScore(n),t.iskeyDownBlock=!t.iskeyDownBlock;var o=e?"#0F0":"#F00";r.renderCubeColor(t.elements.cubeEl,o),r.renderPointsReceived(t.elements.cubeScoreEl,n),r.renderPointsReceivedVisible(t.elements.cubeScoreEl,!0),r.renderScore(t.elements.scoreEl,t.score),t.isGameOver()&&t.stopGame()}}))},r.prototype.startKeysInterval=function(){var t=this,e=k(this.interval);this.timerKeysInterval$=e.subscribe((function(){t.progressBarValue=0,r.renderProgressBar(t.elements.progressBarEl,t.progressBarValue),t.setKey(t.getCurrentKey()),r.renderCubeColor(t.elements.cubeEl,"#CCC"),t.iskeyDownBlock=!1,r.renderKeyEl(t.elements.keyEl,t.currentKey),t.runProgressBar(),r.renderPointsReceivedVisible(t.elements.cubeScoreEl,!1)}))},r.prototype.isGameOver=function(){return this.score>=200||this.score<=0},r.prototype.stopGame=function(){this.timerProgressBar$.unsubscribe(),this.timerKeysInterval$.unsubscribe(),alert("*GAME OVER*")},r.prototype.setKey=function(r){this.currentKey=r},r.prototype.getCurrentKey=function(){var r="0123456789abcdefghijklmnopqrstuvwxyz";return r.charAt(Math.floor(Math.random()*r.length))},r.prototype.runProgressBar=function(){var t,e=this,n=this.interval/100,o=k(100);this.timerProgressBar$=o.pipe((t=n,function(r){return 0===t?e?function(r){return new v((function(t){return r.schedule((function(){return t.complete()}))}))}(e):A:r.lift(new K(t));var e})).subscribe((function(t){e.progressBarValue=Math.ceil(100/n*(t+1)),r.renderProgressBar(e.elements.progressBarEl,e.progressBarValue)}))},r.prototype.setScore=function(r){this.score+=r},r.prototype.calculateScore=function(r,t){var e=Math.ceil((100-r)/10);return e<=5&&(e=5),t||(e-=30),e},r.renderCubeColor=function(r,t){r.style.setProperty("--cube-color",t)},r.renderKeyEl=function(r,t){r.innerHTML=t},r.renderProgressBar=function(r,t){var e=t;e>100&&(e=100),e<0&&(e=0),r.style.setProperty("--progress",e+"%")},r.renderScore=function(r,t){r.innerHTML=t.toString()},r.renderPointsReceived=function(r,t){r.style.setProperty("--content-cube",t<0?'"'+t+'"':'"+'+t+'"')},r.renderPointsReceivedVisible=function(r,t){r.classList.toggle("cube-score--opacity",t)},r}())(document.querySelector("[data-game]")).start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cy8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vdHMvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdHMvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vdHMvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2hvc3RSZXBvcnRFcnJvci5qcyIsIndlYnBhY2s6Ly90cy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL09ic2VydmVyLmpzIiwid2VicGFjazovL3RzLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FycmF5LmpzIiwid2VicGFjazovL3RzLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwid2VicGFjazovL3RzLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL3RzLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly90cy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vdHMvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3RzLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vdHMvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovL3RzLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9waXBlLmpzIiwid2VicGFjazovL3RzLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly90cy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvdG9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3RzLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9jYW5SZXBvcnRFcnJvci5qcyIsIndlYnBhY2s6Ly90cy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy9tYXAuanMiLCJ3ZWJwYWNrOi8vdHMvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudC5qcyIsIndlYnBhY2s6Ly90cy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3NjaGVkdWxlci9BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdHMvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdHMvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9TY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vdHMvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vdHMvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vdHMvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2ludGVydmFsLmpzIiwid2VicGFjazovL3RzLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc051bWVyaWMuanMiLCJ3ZWJwYWNrOi8vdHMvLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL0FyZ3VtZW50T3V0T2ZSYW5nZUVycm9yLmpzIiwid2VicGFjazovL3RzLy4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9lbXB0eS5qcyIsIndlYnBhY2s6Ly90cy8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL29wZXJhdG9ycy90YWtlLmpzIiwid2VicGFjazovL3RzLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfX2V4dGVuZHMiLCJfXyIsInRoaXMiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImNyZWF0ZSIsImlzRnVuY3Rpb24iLCJ4IiwiX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzIiwiY29uZmlnIiwiUHJvbWlzZSIsInVuZGVmaW5lZCIsInZhbHVlIiwiRXJyb3IiLCJzdGFjayIsImhvc3RSZXBvcnRFcnJvciIsImVyciIsInNldFRpbWVvdXQiLCJlbXB0eSIsImNsb3NlZCIsIm5leHQiLCJlcnJvciIsInVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmciLCJjb21wbGV0ZSIsImlzQXJyYXkiLCJsZW5ndGgiLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiVW5zdWJzY3JpcHRpb25FcnJvckltcGwiLCJlcnJvcnMiLCJjYWxsIiwibWVzc2FnZSIsIm1hcCIsImkiLCJ0b1N0cmluZyIsImpvaW4iLCJuYW1lIiwiU3Vic2NyaXB0aW9uIiwidW5zdWJzY3JpYmUiLCJfcGFyZW50T3JQYXJlbnRzIiwiX3N1YnNjcmlwdGlvbnMiLCJfY3RvclVuc3Vic2NyaWJlIiwiX3Vuc3Vic2NyaWJlIiwiX2EiLCJyZW1vdmUiLCJpbmRleCIsImUiLCJmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMiLCJsZW4iLCJzdWIiLCJjb25jYXQiLCJwdXNoIiwiYWRkIiwidGVhcmRvd24iLCJzdWJzY3JpcHRpb24iLCJFTVBUWSIsInRtcCIsImluZGV4T2YiLCJzdWJzY3JpcHRpb25zIiwic3Vic2NyaXB0aW9uSW5kZXgiLCJzcGxpY2UiLCJyZWR1Y2UiLCJlcnJzIiwicnhTdWJzY3JpYmVyIiwiU3ltYm9sIiwiTWF0aCIsInJhbmRvbSIsIlN1YnNjcmliZXIiLCJfc3VwZXIiLCJkZXN0aW5hdGlvbk9yTmV4dCIsIl90aGlzIiwic3luY0Vycm9yVmFsdWUiLCJzeW5jRXJyb3JUaHJvd24iLCJzeW5jRXJyb3JUaHJvd2FibGUiLCJpc1N0b3BwZWQiLCJhcmd1bWVudHMiLCJkZXN0aW5hdGlvbiIsIlNhZmVTdWJzY3JpYmVyIiwic3Vic2NyaWJlciIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSIsIl9wYXJlbnRTdWJzY3JpYmVyIiwib2JzZXJ2ZXJPck5leHQiLCJjb250ZXh0IiwiYmluZCIsIl9jb250ZXh0IiwiX190cnlPclNldEVycm9yIiwiX190cnlPclVuc3ViIiwid3JhcHBlZENvbXBsZXRlIiwiZm4iLCJwYXJlbnQiLCJvYnNlcnZhYmxlIiwiaWRlbnRpdHkiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwiaW5wdXQiLCJwcmV2IiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIl9pc1NjYWxhciIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJzaW5rIiwibmV4dE9yT2JzZXJ2ZXIiLCJ0b1N1YnNjcmliZXIiLCJfdHJ5U3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJjbG9zZWRfMSIsImNhblJlcG9ydEVycm9yIiwiY29uc29sZSIsIndhcm4iLCJmb3JFYWNoIiwicHJvbWlzZUN0b3IiLCJnZXRQcm9taXNlQ3RvciIsInJlc29sdmUiLCJyZWplY3QiLCJwaXBlIiwib3BlcmF0aW9ucyIsIl9pIiwidG9Qcm9taXNlIiwicHJvamVjdCIsInRoaXNBcmciLCJUeXBlRXJyb3IiLCJNYXBPcGVyYXRvciIsIk1hcFN1YnNjcmliZXIiLCJjb3VudCIsInJlc3VsdCIsImZyb21FdmVudCIsInRhcmdldCIsImV2ZW50TmFtZSIsIm9wdGlvbnMiLCJyZXN1bHRTZWxlY3RvciIsImFyZ3MiLCJhcHBseSIsInNldHVwU3Vic2NyaXB0aW9uIiwic2xpY2UiLCJzb3VyY2VPYmoiLCJoYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0V2ZW50VGFyZ2V0Iiwic291cmNlXzEiLCJvbiIsIm9mZiIsImlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIiLCJzb3VyY2VfMiIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJpc05vZGVTdHlsZUV2ZW50RW1pdHRlciIsInNvdXJjZV8zIiwiQXN5bmNBY3Rpb24iLCJzY2hlZHVsZXIiLCJ3b3JrIiwicGVuZGluZyIsInNjaGVkdWxlIiwic3RhdGUiLCJkZWxheSIsImlkIiwicmVjeWNsZUFzeW5jSWQiLCJyZXF1ZXN0QXN5bmNJZCIsInNldEludGVydmFsIiwiZmx1c2giLCJjbGVhckludGVydmFsIiwiZXhlY3V0ZSIsIl9leGVjdXRlIiwiZXJyb3JlZCIsImVycm9yVmFsdWUiLCJhY3Rpb25zIiwiQWN0aW9uIiwiU2NoZWR1bGVyIiwiU2NoZWR1bGVyQWN0aW9uIiwibm93IiwiRGF0ZSIsIkFzeW5jU2NoZWR1bGVyIiwiZGVsZWdhdGUiLCJhY3RpdmUiLCJzY2hlZHVsZWQiLCJhY3Rpb24iLCJzaGlmdCIsImludGVydmFsIiwicGVyaW9kIiwidmFsIiwicGFyc2VGbG9hdCIsImRpc3BhdGNoIiwiY291bnRlciIsIkFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yIiwiQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JJbXBsIiwiVGFrZU9wZXJhdG9yIiwidG90YWwiLCJUYWtlU3Vic2NyaWJlciIsImVsIiwiaXNrZXlEb3duQmxvY2siLCJzY29yZSIsInByb2dyZXNzQmFyVmFsdWUiLCJjdXJyZW50S2V5Iiwic2V0S2V5IiwiZ2V0Q3VycmVudEtleSIsImZpbmRFbGVtZW50cyIsInN1YnNjcmliZU9uS2V5UHJlc3MiLCJzdGFydCIsIkdhbWUiLCJyZW5kZXJLZXlFbCIsImVsZW1lbnRzIiwia2V5RWwiLCJzdGFydEtleXNJbnRlcnZhbCIsInJ1blByb2dyZXNzQmFyIiwic2NvcmVFbCIsInF1ZXJ5U2VsZWN0b3IiLCJjdWJlU2NvcmVFbCIsImN1YmVFbCIsInByb2dyZXNzQmFyRWwiLCJ3aW5kb3ciLCJrZXlFdmVudCIsImxvY2F0aW9uIiwia2V5IiwidG9VcHBlckNhc2UiLCJyZXMiLCJwb2ludHNSZWNlaXZlZCIsImNhbGN1bGF0ZVNjb3JlIiwic2V0U2NvcmUiLCJjb2xvciIsInJlbmRlckN1YmVDb2xvciIsInJlbmRlclBvaW50c1JlY2VpdmVkIiwicmVuZGVyUG9pbnRzUmVjZWl2ZWRWaXNpYmxlIiwicmVuZGVyU2NvcmUiLCJpc0dhbWVPdmVyIiwic3RvcEdhbWUiLCJ0aW1lciQiLCJ0aW1lcktleXNJbnRlcnZhbCQiLCJyZW5kZXJQcm9ncmVzc0JhciIsInRpbWVyUHJvZ3Jlc3NCYXIkIiwiYWxlcnQiLCJzeW1ib2xzIiwiY2hhckF0IiwiZmxvb3IiLCJlbmRDb3VudCIsImVtcHR5U2NoZWR1bGVkIiwiY2VpbCIsImRhdGEiLCJpc0N1cnJlbnRLZXkiLCJzdHlsZSIsInNldFByb3BlcnR5IiwiaW5uZXJIVE1MIiwicHJvZ3Jlc3MiLCJwb2ludHMiLCJ0b2dnbGUiLCJjbGFzc0xpc3QiLCJkb2N1bWVudCJdLCJtYXBwaW5ncyI6IjttQkFnQkEsSUFBSUEsRUFBZ0IsU0FBU0MsRUFBR0MsR0FJNUIsT0FIQUYsRUFBZ0JHLE9BQU9DLGdCQUNsQixDQUFFQyxVQUFXLGNBQWdCQyxPQUFTLFNBQVVMLEVBQUdDLEdBQUtELEVBQUVJLFVBQVlILElBQ3ZFLFNBQVVELEVBQUdDLEdBQUssSUFBSyxJQUFJSyxLQUFL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QkksR0FDaENKLEVBQUdvRCxVQUFZaEQsR0FHWixFQUFBbUMsa0JBQVAsU0FBeUJ2QyxFQUFpQnJMLEdBQ3RDLElBQUkwTyxFQUFtQjFPLEVBQ25CME8sRUFBVyxNQUFLQSxFQUFXLEtBQzNCQSxFQUFXLElBQUdBLEVBQVcsR0FDN0JyRCxFQUFHa0QsTUFBTUMsWUFBWSxhQUFpQkUsRUFBUSxNQUczQyxFQUFBbkIsWUFBUCxTQUFtQmxDLEVBQWlCRSxHQUNoQ0YsRUFBR29ELFVBQVlsRCxFQUFNbEssWUFHbEIsRUFBQWdNLHFCQUFQLFNBQTRCaEMsRUFBaUJzRCxHQUN6Q3RELEVBQUdrRCxNQUFNQyxZQUFZLGlCQUFrQkcsRUFBUyxFQUFJLElBQUlBLEVBQU0sSUFBTSxLQUFLQSxFQUFNLE1BRzVFLEVBQUFyQiw0QkFBUCxTQUFtQ2pDLEVBQWlCdUQsR0FDaER2RCxFQUFHd0QsVUFBVUQsT0FBTyxzQkFBdUJBLElBRW5ELEVBdkpBLEdBeUphLENBQVNFLFNBQVN4QyxjQUFjLGdCQUV4Q1IsUyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY3JlYXRlQmluZGluZyhvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG52YXIgX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzID0gZmFsc2U7XG5leHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgc2V0IHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSAvKkBfX1BVUkVfXyovIG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgLypAX19QVVJFX18qLyBjb25zb2xlLndhcm4oJ0RFUFJFQ0FURUQhIFJ4SlMgd2FzIHNldCB0byB1c2UgZGVwcmVjYXRlZCBzeW5jaHJvbm91cyBlcnJvciBoYW5kbGluZyBiZWhhdmlvciBieSBjb2RlIGF0OiBcXG4nICsgZXJyb3Iuc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncykge1xuICAgICAgICAgICAgLypAX19QVVJFX18qLyBjb25zb2xlLmxvZygnUnhKUzogQmFjayB0byBhIGJldHRlciBlcnJvciBiZWhhdmlvci4gVGhhbmsgeW91LiA8MycpO1xuICAgICAgICB9XG4gICAgICAgIF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncyA9IHZhbHVlO1xuICAgIH0sXG4gICAgZ2V0IHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcoKSB7XG4gICAgICAgIHJldHVybiBfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3M7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaG9zdFJlcG9ydEVycm9yKGVycikge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyB0aHJvdyBlcnI7IH0sIDApO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9zdFJlcG9ydEVycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfY29uZmlnLF91dGlsX2hvc3RSZXBvcnRFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBob3N0UmVwb3J0RXJyb3IgfSBmcm9tICcuL3V0aWwvaG9zdFJlcG9ydEVycm9yJztcbmV4cG9ydCB2YXIgZW1wdHkgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCB2YXIgaXNBcnJheSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFycmF5LmlzQXJyYXkgfHwgKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbnZhciBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzID9cbiAgICAgICAgICAgIGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpIDogJyc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbC5wcm90b3R5cGUgPSAvKkBfX1BVUkVfXyovIE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICByZXR1cm4gVW5zdWJzY3JpcHRpb25FcnJvckltcGw7XG59KSgpO1xuZXhwb3J0IHZhciBVbnN1YnNjcmlwdGlvbkVycm9yID0gVW5zdWJzY3JpcHRpb25FcnJvckltcGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9pc0FycmF5LF91dGlsX2lzT2JqZWN0LF91dGlsX2lzRnVuY3Rpb24sX3V0aWxfVW5zdWJzY3JpcHRpb25FcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi91dGlsL2lzQXJyYXknO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuL3V0aWwvaXNPYmplY3QnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG52YXIgU3Vic2NyaXB0aW9uID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbih1bnN1YnNjcmliZSkge1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9jdG9yVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSB1bnN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfcGFyZW50T3JQYXJlbnRzID0gX2EuX3BhcmVudE9yUGFyZW50cywgX2N0b3JVbnN1YnNjcmliZSA9IF9hLl9jdG9yVW5zdWJzY3JpYmUsIF91bnN1YnNjcmliZSA9IF9hLl91bnN1YnNjcmliZSwgX3N1YnNjcmlwdGlvbnMgPSBfYS5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgaWYgKF9wYXJlbnRPclBhcmVudHMgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIF9wYXJlbnRPclBhcmVudHMucmVtb3ZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9wYXJlbnRPclBhcmVudHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBfcGFyZW50T3JQYXJlbnRzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IF9wYXJlbnRPclBhcmVudHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHBhcmVudF8xLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihfdW5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICBpZiAoX2N0b3JVbnN1YnNjcmliZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBfdW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IgPyBmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZS5lcnJvcnMpIDogW2VdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5KF9zdWJzY3JpcHRpb25zKSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgbGVuID0gX3N1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViID0gX3N1YnNjcmlwdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChzdWIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdChmbGF0dGVuVW5zdWJzY3JpcHRpb25FcnJvcnMoZS5lcnJvcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0ZWFyZG93bjtcbiAgICAgICAgaWYgKCF0ZWFyZG93bikge1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiB0ZWFyZG93bikge1xuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGVhcmRvd24pO1xuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uID09PSB0aGlzIHx8IHN1YnNjcmlwdGlvbi5jbG9zZWQgfHwgdHlwZW9mIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIShzdWJzY3JpcHRpb24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9zdWJzY3JpcHRpb25zID0gW3RtcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIHRlYXJkb3duICcgKyB0ZWFyZG93biArICcgYWRkZWQgdG8gU3Vic2NyaXB0aW9uLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBfcGFyZW50T3JQYXJlbnRzID0gc3Vic2NyaXB0aW9uLl9wYXJlbnRPclBhcmVudHM7XG4gICAgICAgIGlmIChfcGFyZW50T3JQYXJlbnRzID09PSBudWxsKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24uX3BhcmVudE9yUGFyZW50cyA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3BhcmVudE9yUGFyZW50cyBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRPclBhcmVudHMgPT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9wYXJlbnRPclBhcmVudHMgPSBbX3BhcmVudE9yUGFyZW50cywgdGhpc107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX3BhcmVudE9yUGFyZW50cy5pbmRleE9mKHRoaXMpID09PSAtMSkge1xuICAgICAgICAgICAgX3BhcmVudE9yUGFyZW50cy5wdXNoKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25zID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gW3N1YnNjcmlwdGlvbl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5fc3Vic2NyaXB0aW9ucztcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb25JbmRleCA9IHN1YnNjcmlwdGlvbnMuaW5kZXhPZihzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbkluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuc3BsaWNlKHN1YnNjcmlwdGlvbkluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uIChlbXB0eSkge1xuICAgICAgICBlbXB0eS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfShuZXcgU3Vic2NyaXB0aW9uKCkpKTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiB9O1xuZnVuY3Rpb24gZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzKGVycm9ycykge1xuICAgIHJldHVybiBlcnJvcnMucmVkdWNlKGZ1bmN0aW9uIChlcnJzLCBlcnIpIHsgcmV0dXJuIGVycnMuY29uY2F0KChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSA/IGVyci5lcnJvcnMgOiBlcnIpOyB9LCBbXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoeCkge1xuICAgIHJldHVybiB4ICE9PSBudWxsICYmIHR5cGVvZiB4ID09PSAnb2JqZWN0Jztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzT2JqZWN0LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciByeFN1YnNjcmliZXIgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyAvKkBfX1BVUkVfXyovIFN5bWJvbCgncnhTdWJzY3JpYmVyJylcbiAgICAgICAgOiAnQEByeFN1YnNjcmliZXJfJyArIC8qQF9fUFVSRV9fKi8gTWF0aC5yYW5kb20oKTtcbn0pKCk7XG5leHBvcnQgdmFyICQkcnhTdWJzY3JpYmVyID0gcnhTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnhTdWJzY3JpYmVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfdXRpbF9pc0Z1bmN0aW9uLF9PYnNlcnZlcixfU3Vic2NyaXB0aW9uLF9pbnRlcm5hbF9zeW1ib2xfcnhTdWJzY3JpYmVyLF9jb25maWcsX3V0aWxfaG9zdFJlcG9ydEVycm9yIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZW1wdHkgYXMgZW1wdHlPYnNlcnZlciB9IGZyb20gJy4vT2JzZXJ2ZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgcnhTdWJzY3JpYmVyIGFzIHJ4U3Vic2NyaWJlclN5bWJvbCB9IGZyb20gJy4uL2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXInO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaG9zdFJlcG9ydEVycm9yIH0gZnJvbSAnLi91dGlsL2hvc3RSZXBvcnRFcnJvcic7XG52YXIgU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb25Pck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zeW5jRXJyb3JWYWx1ZSA9IG51bGw7XG4gICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZW1wdHlPYnNlcnZlcjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAoIWRlc3RpbmF0aW9uT3JOZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZW1wdHlPYnNlcnZlcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25Pck5leHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXN0aW5hdGlvbk9yTmV4dCBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN5bmNFcnJvclRocm93YWJsZSA9IGRlc3RpbmF0aW9uT3JOZXh0LnN5bmNFcnJvclRocm93YWJsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb25Pck5leHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbk9yTmV4dC5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKF90aGlzLCBkZXN0aW5hdGlvbk9yTmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBfdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKF90aGlzLCBkZXN0aW5hdGlvbk9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIucHJvdG90eXBlW3J4U3Vic2NyaWJlclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIHN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmVBbmRSZWN5Y2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3BhcmVudE9yUGFyZW50cyA9IHRoaXMuX3BhcmVudE9yUGFyZW50cztcbiAgICAgICAgdGhpcy5fcGFyZW50T3JQYXJlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRPclBhcmVudHMgPSBfcGFyZW50T3JQYXJlbnRzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVyO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IFN1YnNjcmliZXIgfTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihfcGFyZW50U3Vic2NyaWJlciwgb2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcGFyZW50U3Vic2NyaWJlciA9IF9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICB2YXIgbmV4dDtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBfdGhpcztcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpKSB7XG4gICAgICAgICAgICBuZXh0ID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dC5uZXh0O1xuICAgICAgICAgICAgZXJyb3IgPSBvYnNlcnZlck9yTmV4dC5lcnJvcjtcbiAgICAgICAgICAgIGNvbXBsZXRlID0gb2JzZXJ2ZXJPck5leHQuY29tcGxldGU7XG4gICAgICAgICAgICBpZiAob2JzZXJ2ZXJPck5leHQgIT09IGVtcHR5T2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dC51bnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRkKGNvbnRleHQudW5zdWJzY3JpYmUuYmluZChjb250ZXh0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRleHQudW5zdWJzY3JpYmUgPSBfdGhpcy51bnN1YnNjcmliZS5iaW5kKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIF90aGlzLl9uZXh0ID0gbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gZXJyb3I7XG4gICAgICAgIF90aGlzLl9jb21wbGV0ZSA9IGNvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQgJiYgdGhpcy5fbmV4dCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIGlmICghY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgfHwgIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHRoaXMuX25leHQsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnRTdWJzY3JpYmVyLCB0aGlzLl9uZXh0LCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIHZhciB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nID0gY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmc7XG4gICAgICAgICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgfHwgIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih0aGlzLl9lcnJvciwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3RyeU9yU2V0RXJyb3IoX3BhcmVudFN1YnNjcmliZXIsIHRoaXMuX2Vycm9yLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICBpZiAodXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVmFsdWUgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBob3N0UmVwb3J0RXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgICAgICBpZiAodGhpcy5fY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlZENvbXBsZXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2NvbXBsZXRlLmNhbGwoX3RoaXMuX2NvbnRleHQpOyB9O1xuICAgICAgICAgICAgICAgIGlmICghY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgfHwgIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JVbnN1Yih3cmFwcGVkQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50U3Vic2NyaWJlciwgd3JhcHBlZENvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl9fdHJ5T3JVbnN1YiA9IGZ1bmN0aW9uIChmbiwgdmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcy5fY29udGV4dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhvc3RSZXBvcnRFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX190cnlPclNldEVycm9yID0gZnVuY3Rpb24gKHBhcmVudCwgZm4sIHZhbHVlKSB7XG4gICAgICAgIGlmICghY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIGNhbGwnKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLl9jb250ZXh0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgICAgIHBhcmVudC5zeW5jRXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgU2FmZVN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BhcmVudFN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICBfcGFyZW50U3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCB2YXIgb2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgJ0BAb2JzZXJ2YWJsZSc7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfaWRlbnRpdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBwaXBlKCkge1xuICAgIHZhciBmbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkoZm5zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBmbikgeyByZXR1cm4gZm4ocHJldik7IH0sIGlucHV0KTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX3V0aWxfY2FuUmVwb3J0RXJyb3IsX3V0aWxfdG9TdWJzY3JpYmVyLF9zeW1ib2xfb2JzZXJ2YWJsZSxfdXRpbF9waXBlLF9jb25maWcgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgY2FuUmVwb3J0RXJyb3IgfSBmcm9tICcuL3V0aWwvY2FuUmVwb3J0RXJyb3InO1xuaW1wb3J0IHsgdG9TdWJzY3JpYmVyIH0gZnJvbSAnLi91dGlsL3RvU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi91dGlsL3BpcGUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xudmFyIE9ic2VydmFibGUgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgdGhpcy5faXNTY2FsYXIgPSBmYWxzZTtcbiAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIG9ic2VydmFibGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgb3BlcmF0b3IgPSB0aGlzLm9wZXJhdG9yO1xuICAgICAgICB2YXIgc2luayA9IHRvU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgaWYgKG9wZXJhdG9yKSB7XG4gICAgICAgICAgICBzaW5rLmFkZChvcGVyYXRvci5jYWxsKHNpbmssIHRoaXMuc291cmNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzaW5rLmFkZCh0aGlzLnNvdXJjZSB8fCAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgJiYgIXNpbmsuc3luY0Vycm9yVGhyb3dhYmxlKSA/XG4gICAgICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlKHNpbmspIDpcbiAgICAgICAgICAgICAgICB0aGlzLl90cnlTdWJzY3JpYmUoc2luaykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgaWYgKHNpbmsuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgc2luay5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoc2luay5zeW5jRXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgc2luay5zeW5jRXJyb3JWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpbms7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgc2luay5zeW5jRXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNpbmsuc3luY0Vycm9yVmFsdWUgPSBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuUmVwb3J0RXJyb3Ioc2luaykpIHtcbiAgICAgICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChuZXh0LCBwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlamVjdCwgcmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZSAmJiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbU3ltYm9sX29ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wZXJhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHZhbHVlID0geDsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcbn0oKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG5mdW5jdGlvbiBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcikge1xuICAgIGlmICghcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBjb25maWcuUHJvbWlzZSB8fCBQcm9taXNlO1xuICAgIH1cbiAgICBpZiAoIXByb21pc2VDdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gUHJvbWlzZSBpbXBsIGZvdW5kJyk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlQ3Rvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGUuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9TdWJzY3JpYmVyLF9zeW1ib2xfcnhTdWJzY3JpYmVyLF9PYnNlcnZlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyByeFN1YnNjcmliZXIgYXMgcnhTdWJzY3JpYmVyU3ltYm9sIH0gZnJvbSAnLi4vc3ltYm9sL3J4U3Vic2NyaWJlcic7XG5pbXBvcnQgeyBlbXB0eSBhcyBlbXB0eU9ic2VydmVyIH0gZnJvbSAnLi4vT2JzZXJ2ZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHRvU3Vic2NyaWJlcihuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgaWYgKG5leHRPck9ic2VydmVyKSB7XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlciBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0T3JPYnNlcnZlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXJbcnhTdWJzY3JpYmVyU3ltYm9sXSkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlclN5bWJvbF0oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW5leHRPck9ic2VydmVyICYmICFlcnJvciAmJiAhY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpYmVyKGVtcHR5T2JzZXJ2ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFN1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b1N1YnNjcmliZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9TdWJzY3JpYmVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjYW5SZXBvcnRFcnJvcihvYnNlcnZlcikge1xuICAgIHdoaWxlIChvYnNlcnZlcikge1xuICAgICAgICB2YXIgX2EgPSBvYnNlcnZlciwgY2xvc2VkXzEgPSBfYS5jbG9zZWQsIGRlc3RpbmF0aW9uID0gX2EuZGVzdGluYXRpb24sIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZDtcbiAgICAgICAgaWYgKGNsb3NlZF8xIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlc3RpbmF0aW9uICYmIGRlc3RpbmF0aW9uIGluc3RhbmNlb2YgU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9ic2VydmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhblJlcG9ydEVycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1hcChwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1hcE9wZXJhdGlvbihzb3VyY2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9qZWN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBpcyBub3QgYSBmdW5jdGlvbi4gQXJlIHlvdSBsb29raW5nIGZvciBgbWFwVG8oKWA/Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBNYXBPcGVyYXRvcihwcm9qZWN0LCB0aGlzQXJnKSk7XG4gICAgfTtcbn1cbnZhciBNYXBPcGVyYXRvciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBPcGVyYXRvcihwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMudGhpc0FyZyA9IHRoaXNBcmc7XG4gICAgfVxuICAgIE1hcE9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgTWFwU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLnByb2plY3QsIHRoaXMudGhpc0FyZykpO1xuICAgIH07XG4gICAgcmV0dXJuIE1hcE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydCB7IE1hcE9wZXJhdG9yIH07XG52YXIgTWFwU3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhNYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1hcFN1YnNjcmliZXIoZGVzdGluYXRpb24sIHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICBfdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIF90aGlzLnRoaXNBcmcgPSB0aGlzQXJnIHx8IF90aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByb2plY3QuY2FsbCh0aGlzLnRoaXNBcmcsIHZhbHVlLCB0aGlzLmNvdW50KyspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIHJldHVybiBNYXBTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF91dGlsX2lzQXJyYXksX3V0aWxfaXNGdW5jdGlvbixfb3BlcmF0b3JzX21hcCBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5JztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi4vb3BlcmF0b3JzL21hcCc7XG52YXIgdG9TdHJpbmcgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nOyB9KSgpO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucywgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgICByZXN1bHRTZWxlY3RvciA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChyZXN1bHRTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKS5waXBlKG1hcChmdW5jdGlvbiAoYXJncykgeyByZXR1cm4gaXNBcnJheShhcmdzKSA/IHJlc3VsdFNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgYXJncykgOiByZXN1bHRTZWxlY3RvcihhcmdzKTsgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlcihlKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2V0dXBTdWJzY3JpcHRpb24odGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIsIHN1YnNjcmliZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gc2V0dXBTdWJzY3JpcHRpb24oc291cmNlT2JqLCBldmVudE5hbWUsIGhhbmRsZXIsIHN1YnNjcmliZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgdW5zdWJzY3JpYmU7XG4gICAgaWYgKGlzRXZlbnRUYXJnZXQoc291cmNlT2JqKSkge1xuICAgICAgICB2YXIgc291cmNlXzEgPSBzb3VyY2VPYmo7XG4gICAgICAgIHNvdXJjZU9iai5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlXzEucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpOyB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHNvdXJjZU9iaikpIHtcbiAgICAgICAgdmFyIHNvdXJjZV8yID0gc291cmNlT2JqO1xuICAgICAgICBzb3VyY2VPYmoub24oZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2VfMi5vZmYoZXZlbnROYW1lLCBoYW5kbGVyKTsgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIoc291cmNlT2JqKSkge1xuICAgICAgICB2YXIgc291cmNlXzMgPSBzb3VyY2VPYmo7XG4gICAgICAgIHNvdXJjZU9iai5hZGRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZV8zLnJlbW92ZUxpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7IH07XG4gICAgfVxuICAgIGVsc2UgaWYgKHNvdXJjZU9iaiAmJiBzb3VyY2VPYmoubGVuZ3RoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzb3VyY2VPYmoubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHNldHVwU3Vic2NyaXB0aW9uKHNvdXJjZU9ialtpXSwgZXZlbnROYW1lLCBoYW5kbGVyLCBzdWJzY3JpYmVyLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBldmVudCB0YXJnZXQnKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlci5hZGQodW5zdWJzY3JpYmUpO1xufVxuZnVuY3Rpb24gaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIoc291cmNlT2JqKSB7XG4gICAgcmV0dXJuIHNvdXJjZU9iaiAmJiB0eXBlb2Ygc291cmNlT2JqLmFkZExpc3RlbmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBzb3VyY2VPYmoucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHNvdXJjZU9iaikge1xuICAgIHJldHVybiBzb3VyY2VPYmogJiYgdHlwZW9mIHNvdXJjZU9iai5vbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygc291cmNlT2JqLm9mZiA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGlzRXZlbnRUYXJnZXQoc291cmNlT2JqKSB7XG4gICAgcmV0dXJuIHNvdXJjZU9iaiAmJiB0eXBlb2Ygc291cmNlT2JqLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNvdXJjZU9iai5yZW1vdmVFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUV2ZW50LmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU3Vic2NyaXB0aW9uIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xudmFyIEFjdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICB9XG4gICAgQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBBY3Rpb247XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY3Rpb24uanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIHRzbGliLF9BY3Rpb24gUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4vQWN0aW9uJztcbnZhciBBc3luY0FjdGlvbiA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhBc3luY0FjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY0FjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICBfdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5pZCB8fCB0aGlzLnJlcXVlc3RBc3luY0lkKHNjaGVkdWxlciwgdGhpcy5pZCwgZGVsYXkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIGlkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRJbnRlcnZhbChzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIHRoaXMpLCBkZWxheSk7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVsYXkgIT09IG51bGwgJiYgdGhpcy5kZWxheSA9PT0gZGVsYXkgJiYgdGhpcy5wZW5kaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignZXhlY3V0aW5nIGEgY2FuY2VsbGVkIGFjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLl9leGVjdXRlKHN0YXRlLCBkZWxheSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGVuZGluZyA9PT0gZmFsc2UgJiYgdGhpcy5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZCh0aGlzLnNjaGVkdWxlciwgdGhpcy5pZCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgdmFyIGVycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndvcmsoc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGVycm9yVmFsdWUgPSAhIWUgJiYgZSB8fCBuZXcgRXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yZWQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgIHZhciBpbmRleCA9IGFjdGlvbnMuaW5kZXhPZih0aGlzKTtcbiAgICAgICAgdGhpcy53b3JrID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IG51bGw7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGFjdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQoc2NoZWR1bGVyLCBpZCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWxheSA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNBY3Rpb247XG59KEFjdGlvbikpO1xuZXhwb3J0IHsgQXN5bmNBY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jQWN0aW9uLmpzLm1hcFxuIiwidmFyIFNjaGVkdWxlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBub3cgPSBTY2hlZHVsZXIubm93O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuU2NoZWR1bGVyQWN0aW9uID0gU2NoZWR1bGVyQWN0aW9uO1xuICAgICAgICB0aGlzLm5vdyA9IG5vdztcbiAgICB9XG4gICAgU2NoZWR1bGVyLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uICh3b3JrLCBkZWxheSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuU2NoZWR1bGVyQWN0aW9uKHRoaXMsIHdvcmspLnNjaGVkdWxlKHN0YXRlLCBkZWxheSk7XG4gICAgfTtcbiAgICBTY2hlZHVsZXIubm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gRGF0ZS5ub3coKTsgfTtcbiAgICByZXR1cm4gU2NoZWR1bGVyO1xufSgpKTtcbmV4cG9ydCB7IFNjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2NoZWR1bGVyLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfQXN5bmNBY3Rpb24sX0FzeW5jU2NoZWR1bGVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xuZXhwb3J0IHZhciBhc3luY1NjaGVkdWxlciA9IC8qQF9fUFVSRV9fKi8gbmV3IEFzeW5jU2NoZWR1bGVyKEFzeW5jQWN0aW9uKTtcbmV4cG9ydCB2YXIgYXN5bmMgPSBhc3luY1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCB0c2xpYixfU2NoZWR1bGVyIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTY2hlZHVsZXIgfSBmcm9tICcuLi9TY2hlZHVsZXInO1xudmFyIEFzeW5jU2NoZWR1bGVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFzeW5jU2NoZWR1bGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jU2NoZWR1bGVyKFNjaGVkdWxlckFjdGlvbiwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgbm93ID0gU2NoZWR1bGVyLm5vdztcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBTY2hlZHVsZXJBY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChBc3luY1NjaGVkdWxlci5kZWxlZ2F0ZSAmJiBBc3luY1NjaGVkdWxlci5kZWxlZ2F0ZSAhPT0gX3RoaXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUubm93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFjdGlvbnMgPSBbXTtcbiAgICAgICAgX3RoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY1NjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlICYmIEFzeW5jU2NoZWR1bGVyLmRlbGVnYXRlICE9PSB0aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXIuZGVsZWdhdGUuc2NoZWR1bGUod29yaywgZGVsYXksIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnNjaGVkdWxlLmNhbGwodGhpcywgd29yaywgZGVsYXksIHN0YXRlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXN5bmNTY2hlZHVsZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSk7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY1NjaGVkdWxlcjtcbn0oU2NoZWR1bGVyKSk7XG5leHBvcnQgeyBBc3luY1NjaGVkdWxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNTY2hlZHVsZXIuanMubWFwXG4iLCIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9PYnNlcnZhYmxlLF9zY2hlZHVsZXJfYXN5bmMsX3V0aWxfaXNOdW1lcmljIFBVUkVfSU1QT1JUU19FTkQgKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGFzeW5jIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGlzTnVtZXJpYyB9IGZyb20gJy4uL3V0aWwvaXNOdW1lcmljJztcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnZhbChwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgIGlmIChwZXJpb2QgPT09IHZvaWQgMCkge1xuICAgICAgICBwZXJpb2QgPSAwO1xuICAgIH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgc2NoZWR1bGVyID0gYXN5bmM7XG4gICAgfVxuICAgIGlmICghaXNOdW1lcmljKHBlcmlvZCkgfHwgcGVyaW9kIDwgMCkge1xuICAgICAgICBwZXJpb2QgPSAwO1xuICAgIH1cbiAgICBpZiAoIXNjaGVkdWxlciB8fCB0eXBlb2Ygc2NoZWR1bGVyLnNjaGVkdWxlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGFzeW5jO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGRpc3BhdGNoLCBwZXJpb2QsIHsgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgY291bnRlcjogMCwgcGVyaW9kOiBwZXJpb2QgfSkpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKHN0YXRlKSB7XG4gICAgdmFyIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyLCBjb3VudGVyID0gc3RhdGUuY291bnRlciwgcGVyaW9kID0gc3RhdGUucGVyaW9kO1xuICAgIHN1YnNjcmliZXIubmV4dChjb3VudGVyKTtcbiAgICB0aGlzLnNjaGVkdWxlKHsgc3Vic2NyaWJlcjogc3Vic2NyaWJlciwgY291bnRlcjogY291bnRlciArIDEsIHBlcmlvZDogcGVyaW9kIH0sIHBlcmlvZCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnZhbC5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgX2lzQXJyYXkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4vaXNBcnJheSc7XG5leHBvcnQgZnVuY3Rpb24gaXNOdW1lcmljKHZhbCkge1xuICAgIHJldHVybiAhaXNBcnJheSh2YWwpICYmICh2YWwgLSBwYXJzZUZsb2F0KHZhbCkgKyAxKSA+PSAwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNOdW1lcmljLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xudmFyIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9ySW1wbCA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBcmd1bWVudE91dE9mUmFuZ2VFcnJvckltcGwoKSB7XG4gICAgICAgIEVycm9yLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdhcmd1bWVudCBvdXQgb2YgcmFuZ2UnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQXJndW1lbnRPdXRPZlJhbmdlRXJyb3InO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JJbXBsLnByb3RvdHlwZSA9IC8qQF9fUFVSRV9fKi8gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIHJldHVybiBBcmd1bWVudE91dE9mUmFuZ2VFcnJvckltcGw7XG59KSgpO1xuZXhwb3J0IHZhciBBcmd1bWVudE91dE9mUmFuZ2VFcnJvciA9IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yLmpzLm1hcFxuIiwiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfT2JzZXJ2YWJsZSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIEVNUFRZID0gLypAX19QVVJFX18qLyBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTtcbmV4cG9ydCBmdW5jdGlvbiBlbXB0eShzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSA6IEVNUFRZO1xufVxuZnVuY3Rpb24gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbXB0eS5qcy5tYXBcbiIsIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmliZXIsX3V0aWxfQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IsX29ic2VydmFibGVfZW1wdHkgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yIH0gZnJvbSAnLi4vdXRpbC9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcic7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4uL29ic2VydmFibGUvZW1wdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHRha2UoY291bnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBUYWtlT3BlcmF0b3IoY291bnQpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG52YXIgVGFrZU9wZXJhdG9yID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRha2VPcGVyYXRvcih0b3RhbCkge1xuICAgICAgICB0aGlzLnRvdGFsID0gdG90YWw7XG4gICAgICAgIGlmICh0aGlzLnRvdGFsIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIFRha2VPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFRha2VTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHRoaXMudG90YWwpKTtcbiAgICB9O1xuICAgIHJldHVybiBUYWtlT3BlcmF0b3I7XG59KCkpO1xudmFyIFRha2VTdWJzY3JpYmVyID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFRha2VTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRha2VTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCB0b3RhbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudG90YWwgPSB0b3RhbDtcbiAgICAgICAgX3RoaXMuY291bnQgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRha2VTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgdG90YWwgPSB0aGlzLnRvdGFsO1xuICAgICAgICB2YXIgY291bnQgPSArK3RoaXMuY291bnQ7XG4gICAgICAgIGlmIChjb3VudCA8PSB0b3RhbCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChjb3VudCA9PT0gdG90YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVGFrZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2UuanMubWFwXG4iLCJpbXBvcnQgeyBpbnRlcnZhbCwgZnJvbUV2ZW50LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBFbGVtZW50c0hUTUwgfSBmcm9tICcuL2h0bWwtZWxlbWVudHMnO1xuXG5jbGFzcyBHYW1lIHtcbiAgICBwcml2YXRlIGlza2V5RG93bkJsb2NrOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBpbnRlcnZhbDogbnVtYmVyID0gMjAwMDtcbiAgICBwcml2YXRlIHNjb3JlOiBudW1iZXIgPSAxMDA7XG4gICAgcHJpdmF0ZSBwcm9ncmVzc0JhclZhbHVlOiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgY3VycmVudEtleTogc3RyaW5nID0gJyc7XG4gICAgcHJpdmF0ZSBlbDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBlbGVtZW50czogRWxlbWVudHNIVE1MO1xuICAgIHByaXZhdGUgdGltZXJQcm9ncmVzc0JhciQ6IGFueTtcbiAgICBwcml2YXRlIHRpbWVyS2V5c0ludGVydmFsJDogYW55O1xuXG4gICAgY29uc3RydWN0b3IoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgICAgdGhpcy5zZXRLZXkodGhpcy5nZXRDdXJyZW50S2V5KCkpO1xuICAgICAgICB0aGlzLmZpbmRFbGVtZW50cygpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZU9uS2V5UHJlc3MoKVxuICAgIH1cblxuICAgIHN0YXJ0KCk6IHZvaWQge1xuICAgICAgICBHYW1lLnJlbmRlcktleUVsKHRoaXMuZWxlbWVudHMua2V5RWwsIHRoaXMuY3VycmVudEtleSk7XG4gICAgICAgIHRoaXMuc3RhcnRLZXlzSW50ZXJ2YWwoKTtcbiAgICAgICAgdGhpcy5ydW5Qcm9ncmVzc0JhcigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmluZEVsZW1lbnRzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0ge1xuICAgICAgICAgICAgc2NvcmVFbDogdGhpcy5lbC5xdWVyeVNlbGVjdG9yPEhUTUxQYXJhZ3JhcGhFbGVtZW50PignW2RhdGEtc2NvcmVdJyksXG4gICAgICAgICAgICBjdWJlU2NvcmVFbDogdGhpcy5lbC5xdWVyeVNlbGVjdG9yPEhUTUxEaXZFbGVtZW50PignW2RhdGEtY3ViZS1zY29yZV0nKSxcbiAgICAgICAgICAgIGN1YmVFbDogdGhpcy5lbC5xdWVyeVNlbGVjdG9yPEhUTUxEaXZFbGVtZW50PignW2RhdGEtY3ViZV0nKSxcbiAgICAgICAgICAgIGtleUVsOiB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3I8SFRNTFNwYW5FbGVtZW50PignW2RhdGEta2V5XScpLFxuICAgICAgICAgICAgcHJvZ3Jlc3NCYXJFbDogdGhpcy5lbC5xdWVyeVNlbGVjdG9yPEhUTUxEaXZFbGVtZW50PignW2RhdGEtcHJvZ3Jlc3NdJyksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVPbktleVByZXNzKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBrZXlEb3duJDogT2JzZXJ2YWJsZTxFdmVudD4gPSBmcm9tRXZlbnQod2luZG93LCAna2V5ZG93bicpO1xuICAgICAgICBrZXlEb3duJFxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChrZXlFdmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0OiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5RXZlbnQubG9jYXRpb24gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXlFdmVudC5rZXkudG9VcHBlckNhc2UoKSA9PT0gdGhpcy5jdXJyZW50S2V5LnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgocmVzOiBib29sZWFuIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlza2V5RG93bkJsb2NrICYmIHR5cGVvZiByZXMgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb2ludHNSZWNlaXZlZDogbnVtYmVyID0gdGhpcy5jYWxjdWxhdGVTY29yZSh0aGlzLnByb2dyZXNzQmFyVmFsdWUsIHJlcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U2NvcmUocG9pbnRzUmVjZWl2ZWQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlza2V5RG93bkJsb2NrID0gIXRoaXMuaXNrZXlEb3duQmxvY2s7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yOiBzdHJpbmcgPSAocmVzKSA/ICcjMEYwJyA6ICcjRjAwJztcbiAgICAgICAgICAgICAgICAgICAgR2FtZS5yZW5kZXJDdWJlQ29sb3IodGhpcy5lbGVtZW50cy5jdWJlRWwsIGNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgR2FtZS5yZW5kZXJQb2ludHNSZWNlaXZlZCh0aGlzLmVsZW1lbnRzLmN1YmVTY29yZUVsLCBwb2ludHNSZWNlaXZlZCk7XG4gICAgICAgICAgICAgICAgICAgIEdhbWUucmVuZGVyUG9pbnRzUmVjZWl2ZWRWaXNpYmxlKHRoaXMuZWxlbWVudHMuY3ViZVNjb3JlRWwsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBHYW1lLnJlbmRlclNjb3JlKHRoaXMuZWxlbWVudHMuc2NvcmVFbCwgdGhpcy5zY29yZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzR2FtZU92ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wR2FtZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXJ0S2V5c0ludGVydmFsKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB0aW1lciQgPSBpbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICAgICAgdGhpcy50aW1lcktleXNJbnRlcnZhbCQgPSB0aW1lciQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXJWYWx1ZSA9IDA7XG4gICAgICAgICAgICBHYW1lLnJlbmRlclByb2dyZXNzQmFyKHRoaXMuZWxlbWVudHMucHJvZ3Jlc3NCYXJFbCwgdGhpcy5wcm9ncmVzc0JhclZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0S2V5KHRoaXMuZ2V0Q3VycmVudEtleSgpKTtcbiAgICAgICAgICAgIEdhbWUucmVuZGVyQ3ViZUNvbG9yKHRoaXMuZWxlbWVudHMuY3ViZUVsLCAnI0NDQycpO1xuICAgICAgICAgICAgdGhpcy5pc2tleURvd25CbG9jayA9IGZhbHNlO1xuICAgICAgICAgICAgR2FtZS5yZW5kZXJLZXlFbCh0aGlzLmVsZW1lbnRzLmtleUVsLCB0aGlzLmN1cnJlbnRLZXkpO1xuICAgICAgICAgICAgdGhpcy5ydW5Qcm9ncmVzc0JhcigpO1xuICAgICAgICAgICAgR2FtZS5yZW5kZXJQb2ludHNSZWNlaXZlZFZpc2libGUodGhpcy5lbGVtZW50cy5jdWJlU2NvcmVFbCwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzR2FtZU92ZXIoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjb3JlID49IDIwMCB8fCB0aGlzLnNjb3JlIDw9IDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdG9wR2FtZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50aW1lclByb2dyZXNzQmFyJC51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnRpbWVyS2V5c0ludGVydmFsJC51bnN1YnNjcmliZSgpO1xuICAgICAgICBhbGVydCgnKkdBTUUgT1ZFUionKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEtleShrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmN1cnJlbnRLZXkgPSBrZXk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDdXJyZW50S2V5KCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHN5bWJvbHM6IHN0cmluZyA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO1xuICAgICAgICByZXR1cm4gc3ltYm9scy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc3ltYm9scy5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJ1blByb2dyZXNzQmFyKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB0aW1lSW50ZXJ2YWw6IG51bWJlciA9IDEwMDtcbiAgICAgICAgY29uc3QgZW5kQ291bnQ6IG51bWJlciA9IHRoaXMuaW50ZXJ2YWwgLyB0aW1lSW50ZXJ2YWw7XG4gICAgICAgIGNvbnN0IHRpbWVyJCA9IGludGVydmFsKHRpbWVJbnRlcnZhbCk7XG4gICAgICAgIHRoaXMudGltZXJQcm9ncmVzc0JhciQgPSB0aW1lciQucGlwZShcbiAgICAgICAgICAgIHRha2UoZW5kQ291bnQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXJWYWx1ZSA9IE1hdGguY2VpbCgoMTAwIC8gZW5kQ291bnQpICogKGluZGV4ICsgMSkpO1xuICAgICAgICAgICAgICAgIEdhbWUucmVuZGVyUHJvZ3Jlc3NCYXIodGhpcy5lbGVtZW50cy5wcm9ncmVzc0JhckVsLCB0aGlzLnByb2dyZXNzQmFyVmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRTY29yZShzY29yZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2NvcmUgKz0gc2NvcmU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVTY29yZShkYXRhOiBudW1iZXIsIGlzQ3VycmVudEtleTogYm9vbGVhbik6IG51bWJlciB7XG4gICAgICAgIGxldCBzY29yZTogbnVtYmVyID0gTWF0aC5jZWlsKCgxMDAgLSBkYXRhKSAvIDEwKTtcbiAgICAgICAgaWYgKHNjb3JlIDw9IDUpIHNjb3JlID0gNTtcbiAgICAgICAgaWYgKCFpc0N1cnJlbnRLZXkpIHtcbiAgICAgICAgICAgIHNjb3JlIC09IDMwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY29yZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcmVuZGVyQ3ViZUNvbG9yKGVsOiBIVE1MRWxlbWVudCwgY29sb3I6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1jdWJlLWNvbG9yJywgY29sb3IpO1xuICAgIH1cblxuICAgIHN0YXRpYyByZW5kZXJLZXlFbChlbDogSFRNTEVsZW1lbnQsIGN1cnJlbnRLZXk6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBlbC5pbm5lckhUTUwgPSBjdXJyZW50S2V5O1xuICAgIH1cblxuICAgIHN0YXRpYyByZW5kZXJQcm9ncmVzc0JhcihlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgbGV0IHByb2dyZXNzOiBudW1iZXIgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHByb2dyZXNzID4gMTAwKSBwcm9ncmVzcyA9IDEwMDtcbiAgICAgICAgaWYgKHByb2dyZXNzIDwgMCkgcHJvZ3Jlc3MgPSAwO1xuICAgICAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1wcm9ncmVzcycsIGAke3Byb2dyZXNzfSVgKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcmVuZGVyU2NvcmUoZWw6IEhUTUxFbGVtZW50LCBzY29yZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGVsLmlubmVySFRNTCA9IHNjb3JlLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHJlbmRlclBvaW50c1JlY2VpdmVkKGVsOiBIVE1MRWxlbWVudCwgcG9pbnRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tY29udGVudC1jdWJlJywgcG9pbnRzIDwgMCA/IGBcIiR7cG9pbnRzfVwiYCA6IGBcIiske3BvaW50c31cImApO1xuICAgIH1cblxuICAgIHN0YXRpYyByZW5kZXJQb2ludHNSZWNlaXZlZFZpc2libGUoZWw6IEhUTUxFbGVtZW50LCB0b2dnbGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnRvZ2dsZSgnY3ViZS1zY29yZS0tb3BhY2l0eScsIHRvZ2dsZSk7XG4gICAgfVxufVxuXG5jb25zdCBnYW1lID0gbmV3IEdhbWUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtZ2FtZV0nKSk7XG5cbmdhbWUuc3RhcnQoKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=