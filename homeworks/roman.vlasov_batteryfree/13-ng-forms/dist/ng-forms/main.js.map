{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { UserDataModel } from './models/user-data-model'\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n    title = 'ng-forms';\n\n    public hidePassword: boolean = true;\n\n    ngOnInit(): void {\n        this.restoryDataForm();\n    }\n\n    public loginForm: FormGroup = new FormGroup({\n        userEmail: new FormControl('', [Validators.required, Validators.email]),\n        userPassword: new FormControl('', [Validators.required]),\n        rememberMe: new FormControl(false)\n    })\n\n    public getErrorMessageMail(): string {\n        if (this.loginForm.controls['userEmail'].hasError('required')) {\n            return 'You must enter a value';\n        }\n        return this.loginForm.controls['userEmail'].hasError('email') ? 'Not a valid email' : '';\n    }\n\n    public getErrorMessagePassword(): string {\n        if (this.loginForm.controls['userPassword'].hasError('required')) {\n            return 'You must enter a password';\n        }\n    }\n\n    get userEmail(): string {\n        return this.loginForm.get('userEmail').value as string;\n    }\n\n    get userPassword(): string {\n        return this.loginForm.get('userPassword').value as string;\n    }\n\n    private saveDataToLStorage(): void {\n        if (this.loginForm.get('rememberMe').value) {\n            const userData: UserDataModel = { 'userEmail': this.userEmail, 'userPassword': this.userPassword };\n            const userDataJson: string = JSON.stringify(userData);\n            const userDataB64: string = btoa(userDataJson);\n            localStorage.setItem('userData', userDataB64);\n        } else {\n            localStorage.removeItem('userData');\n        }\n    }\n\n    get getSaveDataFromLStorage(): UserDataModel | null {\n        const userDataB64: string | null = localStorage.getItem('userData');\n        if (userDataB64) {\n            const userDataJson: UserDataModel = JSON.parse(atob(userDataB64));\n            return userDataJson;\n        }\n        return null;\n    }\n\n    private restoryDataForm(): void {\n        const userData: UserDataModel | null = this.getSaveDataFromLStorage;\n        if (userData) {\n            this.loginForm.get('userEmail').setValue(userData.userEmail);\n            this.loginForm.get('userPassword').setValue(userData.userPassword);\n            this.loginForm.get('rememberMe').setValue(true);\n        }\n    }\n\n    public submit(): void {\n        this.saveDataToLStorage();\n        alert(`User login: ${this.userEmail}\\nUser password: ${this.userPassword}`);\n        this.loginForm.reset();\n    }\n}\n","<form [formGroup]=\"loginForm\" novalidate (ngSubmit)=\"submit()\">\n    <mat-card class=\"login\">\n        <mat-card-header>\n            <mat-card-title>Login</mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"login__content\">\n            <mat-form-field appearance=\"legacy\">\n                <mat-label>Enter your email</mat-label>\n                <input matInput placeholder=\"pat@example.com\" [formControl]=\"loginForm.controls['userEmail']\" required>\n                <mat-error *ngIf=\"loginForm.controls['userEmail'].invalid\">{{getErrorMessageMail()}}</mat-error>\n            </mat-form-field>\n            <mat-form-field appearance=\"legacy\">\n                <mat-label>Enter your password</mat-label>\n                <input matInput [type]=\"hidePassword ? 'password' : 'text'\"\n                    [formControl]=\"loginForm.controls['userPassword']\">\n                <button type=\"button\" mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\"\n                    [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hidePassword\">\n                    <mat-icon>{{hidePassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n                </button>\n            </mat-form-field>\n        </mat-card-content>\n        <mat-card-actions class=\"login__action\">\n            <button mat-raised-button color=\"primary\" [disabled]=\"loginForm.invalid\" type=\"submit\">Submit</button>\n            <mat-checkbox [formControl]=\"loginForm.controls['rememberMe']\">Remember me</mat-checkbox>\n        </mat-card-actions>\n    </mat-card>\n</form>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatCardModule,\n        MatInputModule,\n        MatFormFieldModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatIconModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}