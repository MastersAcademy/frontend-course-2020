/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("var scoreElement = document.querySelector('[data-score]');\r\nvar cubeElement = document.querySelector('[data-cube]');\r\nvar cubeScoreElement = document.querySelector('[data-cube-score]');\r\nvar keyElement = document.querySelector('[data-key]');\r\nvar barElement = document.querySelector('[data-my-bar]');\r\nvar resultElement = document.querySelector('[data-result]');\r\nvar Game = /** @class */ (function () {\r\n    function Game(scoreElement, cubeScoreElement, keyElement, cubeElement, resultElement) {\r\n        this.scoreElement = scoreElement;\r\n        this.cubeScoreElement = cubeScoreElement;\r\n        this.keyElement = keyElement;\r\n        this.cubeElement = cubeElement;\r\n        this.resultElement = resultElement;\r\n        this.score = 100;\r\n        this.interval = 2000;\r\n        this.scoreCurrent = 100;\r\n    }\r\n    Game.prototype.start = function () {\r\n        this.startKeysInterval();\r\n    };\r\n    Game.prototype.startKeysInterval = function () {\r\n        var _this = this;\r\n        this.subscribeOnKeyPress();\r\n        var id = setInterval(function () {\r\n            Game.drawProgressBar();\r\n            Game.randAZ();\r\n            // const scoreCurr = Number.parseInt(this.scoreElement.innerHTML);\r\n            //if (scoreCurr === 200 || scoreCurr === 0) {\r\n            if (_this.scoreCurrent > 200 || _this.scoreCurrent < 0) {\r\n                clearInterval(id);\r\n            }\r\n        }, this.interval);\r\n    };\r\n    Game.drawProgressBar = function () {\r\n        return barElement.classList.toggle('active-mybar');\r\n    };\r\n    Game.prototype.stopGame = function (resultStr, resultNum) {\r\n        this.resultElement.innerHTML = resultStr;\r\n        this.scoreElement.innerHTML = resultNum;\r\n        this.cubeScoreElement.innerHTML = '0';\r\n        this.cubeElement.style.width = '100px';\r\n        this.cubeElement.style.height = '100px';\r\n    };\r\n    Game.prototype.setScore = function (score) {\r\n        this.scoreCurrent = score;\r\n        this.scoreElement.innerHTML = score.toString();\r\n        if (score >= 200)\r\n            this.stopGame('Победа', '200');\r\n        if (score < 0)\r\n            this.stopGame('Проигрыш', '0');\r\n    };\r\n    Game.randAZ = function () {\r\n        var str = 'abcdefghijklmnopqrstuwvxyz';\r\n        return keyElement.innerHTML = str.charAt(this.getRandomArbitrary(0, 25)).toUpperCase();\r\n    };\r\n    Game.prototype.setSizeCube = function (score, randomNum) {\r\n        var size = String(score + randomNum) + 'px';\r\n        this.cubeElement.style.width = size;\r\n        this.cubeElement.style.height = size;\r\n    };\r\n    Game.prototype.setPlusMinusKeyAndSizeCube = function (num1, num2, dividNum) {\r\n        var randomNum = Game.getRandomArbitrary(num1, num2);\r\n        this.addScore(randomNum);\r\n        cubeScoreElement.style.display = 'block';\r\n        this.setSizeCube(this.score, randomNum / dividNum);\r\n    };\r\n    Game.prototype.setKey = function (key) {\r\n        if (key === keyElement.innerHTML) {\r\n            this.setPlusMinusKeyAndSizeCube(5, 10, 4);\r\n        }\r\n        else {\r\n            this.setPlusMinusKeyAndSizeCube(-20, -25, 8);\r\n        }\r\n    };\r\n    Game.getRandomArbitrary = function (min, max) {\r\n        return Math.ceil(Math.random() * (max - min) + min);\r\n    };\r\n    Game.prototype.addScore = function (score) {\r\n        //const scoreCurr = Number.parseInt(this.scoreElement.innerHTML);\r\n        this.cubeScoreElement.innerHTML = score.toString();\r\n        //this.setScore(scoreCurr + score);\r\n        this.setScore(this.scoreCurrent + score);\r\n        console.log(this.scoreCurrent);\r\n    };\r\n    Game.prototype.subscribeOnKeyPress = function () {\r\n        var _this = this;\r\n        document.body.addEventListener('keydown', function (e) {\r\n            _this.setKey(e.key.toUpperCase());\r\n        });\r\n    };\r\n    return Game;\r\n}());\r\nvar game = new Game(scoreElement, cubeScoreElement, keyElement, cubeElement, resultElement);\r\ngame.start();\r\n\n\n//# sourceURL=webpack://6-typescript/./src/index.ts?");
/******/ })()
;